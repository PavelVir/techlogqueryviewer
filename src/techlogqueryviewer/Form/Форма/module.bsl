Перем мИмяФайлаБэкапаНастроекЖурнала;

Перем мЧтениеТекста; 					// Объект типа "ЧтениеТекста"
										// переменная сделана модульной для того, чтобы
										// иметь возможность продолжить чтение ранее открытого файлаъ
										// без необходимости его повторного открытия и чтения с начала					 
Перем мТекущийФайл;  					// Файл открытый в данный момент с помощью "мЧтениеТекста"

Перем мДатаПриСтарте;					// Дата + время которые были при нажатии на кнопку "Старт"

Перем мПрочитанныеФайлы;                // Таблица значений с перечнем файлов и их размеров при последнем их чтении
										// используется для исключения из обработки тех файлов размер которых не менялся
										// с последней операции чтения, также в таблице хранится дата последнего события,
										// прочитанного в файле,
										// это позволяет исключать уже прочитанные строки в файле
Перем мИдетОбработка;
Перем мСоответствияИмен;
Перем мБылСозданФайлНастроек;
Перем мУжеПрочитанныеСобытия; // Таблица с загруженными событиями, очищачется при нажатии на кнопку "Очистить" 
Перем мКоличествоЗапросовНаВывод;
Перем мКоличествоТочекАнимиации;
Перем мПутьКФайлуНастроекЖурнала;
Перем мПутьКЛогам;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


Процедура СделатьБэкапФайлаНастроек()
	Файл = Новый Файл(мПутьКФайлуНастроекЖурнала);		
	Если Файл.Существует() Тогда
		мИмяФайлаБэкапаНастроекЖурнала = ПолучитьУникальноеИмяФайла(Файл.Путь + "\backup_logcfg.xml");
		ПереместитьФайл(мПутьКФайлуНастроекЖурнала,  мИмяФайлаБэкапаНастроекЖурнала); 	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПутьККаталогуЖурнала()
	
	Путь = мПутьКЛогам;
	Файл = Новый Файл(Путь);
	Если Файл.Существует() Тогда		
		ЭлементыФормы.ПредставлениеПутиККаталогуЛогов.Заголовок = Путь;
		ЭлементыФормы.ПредставлениеПутиККаталогуЛогов.Видимость = Истина;
		ЭлементыФормы.НадписьКаталогЛогов.Видимость = Истина;	
		ЭлементыФормы.НадписьКаталогЛоговАнимация.Видимость = Ложь;			
	Иначе
		ЭлементыФормы.ПредставлениеПутиККаталогуЛогов.Видимость = Ложь;
		ЭлементыФормы.НадписьКаталогЛогов.Видимость = Ложь;
		
		Если мИдетОбработка Тогда
			Анимация = "";
			Для Счетчик = 1 по мКоличествоТочекАнимиации Цикл
				Анимация = Анимация + ".";
			КонецЦикла;
			ЭлементыФормы.НадписьКаталогЛоговАнимация.Заголовок = "Каталог журнала еще не создан" + Анимация;
			мКоличествоТочекАнимиации = мКоличествоТочекАнимиации + 1;
			Если мКоличествоТочекАнимиации > 5 Тогда
				 мКоличествоТочекАнимиации = 1;
			КонецЕсли;
			ЭлементыФормы.НадписьКаталогЛоговАнимация.Видимость = Истина;	
		Иначе
		ЭлементыФормы.НадписьКаталогЛоговАнимация.Видимость = Ложь;						
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьТекстДляВывода(Строка)
	
	Возврат "<" + Формат(Строка.Дата, "ДФ=HH:mm:ss")
	+ ?(ЗначениеЗаполнено(Строка.Пользователь), ", " + Строка.Пользователь, "")
	+ ", " + Строка.ИмяСУБД + ">-"
	+ "(" + Сред(Строка.МоментВремени, 9) + ", "
	+ Строка.ИмяФайла + ")--------------------------------------------------------------------------------------------------------"	
	+ Символы.ПС + Символы.ПС
	+ Строка.ТекстЗапроса
	+ ?(ЗначениеЗаполнено(Строка.Контекст),Символы.ПС + Символы.ПС + "Context:" + Символы.ПС + Строка.Контекст, "")
	+ ?(ПолучатьПланыЗапросов И ЗначениеЗаполнено(Строка.ПланЗапроса), Символы.ПС + Символы.ПС + "planSQLText:" + Символы.ПС + Строка.ПланЗапроса + Символы.ПС, "")
	+ Символы.ПС;
	
КонецФункции

Процедура ЗаполнитьСоответствияИмен()
	
	СтруктураХраненияБазыДанных = ПолучитьСтруктуруХраненияБазыДанных();
	
	мСоответствияИмен = Новый ТаблицаЗначений;
	мСоответствияИмен.Колонки.Добавить("СУБД");
	мСоответствияИмен.Колонки.Добавить("Метаданные");
	
	Для каждого Строка из СтруктураХраненияБазыДанных Цикл
		ИмяТаблицы = Строка.ИмяТаблицы;
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		НоваяСтрока = мСоответствияИмен.Добавить();
		ИмяТаблицыХранения = Строка.ИмяТаблицыХранения;
		Если Найти(ИмяТаблицыХранения, ".VT") > 1 Тогда
			 ИмяТаблицыХранения = СтрЗаменить(ИмяТаблицыХранения, ".VT", "_VT");
		ИначеЕсли Найти(ИмяТаблицыХранения, ".ExtDim") > 1 Тогда
			 ИмяТаблицыХранения = СтрЗаменить(ИмяТаблицыХранения, ".ExtDim", "_ExtDim");			 
		КонецЕсли;
		 
		 
		НоваяСтрока.СУБД = ИмяТаблицыХранения;
		НоваяСтрока.Метаданные = ИмяТаблицы;
		КонецЕсли;
		Поля = Строка.Поля;
		Для каждого Поле из Поля Цикл
			ИмяПоля = Поле.ИмяПоля;
			Если ЗначениеЗаполнено(ИмяПоля) Тогда 
			НоваяСтрока = мСоответствияИмен.Добавить();
			НоваяСтрока.СУБД = Поле.ИмяПоляХранения;
			НоваяСтрока.Метаданные = ИмяПоля;		
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	мСоответствияИмен.Свернуть("СУБД,Метаданные");
	
	// Добавим индекс для колонки "СУБД"
	мСоответствияИмен.Индексы.Добавить("СУБД");
	
	// Удалим неоднозначные соотвествия
	Отбор = Новый Структура("СУБД");
	СтрокиКУдалению = Новый Массив;
	Для каждого Строка из мСоответствияИмен Цикл
		Отбор.СУБД = Строка.СУБД;
		НайденныеСтроки = мСоответствияИмен.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 1 Тогда // Если нашли более одного соответствия, то это неодонозначность
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если СтрокиКУдалению.Найти(НайденнаяСтрока) = Неопределено Тогда
					СтрокиКУдалению.Добавить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка из СтрокиКУдалению Цикл
		мСоответствияИмен.Удалить(Строка);
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьОтбор()
	
	ЭлементыФормы.Результат.Очистить();	
	НетОтобраПоТексту = ПустаяСтрока(ОтборПоТексту);	
	мКоличествоЗапросовНаВывод = 0;
	
	ОтборПоТекстуНРЕГ = НРЕГ(ОтборПоТексту);
	Результат = ЭлементыФОрмы.Результат;
	Для Каждого Строка из мУжеПрочитанныеСобытия Цикл
		Если НетОтобраПоТексту ИЛИ Найти(НРЕГ(Строка.ТекстЗапроса), ОтборПоТекстуНРЕГ) > 0
			ИЛИ Найти(НРЕГ(Строка.Контекст), ОтборПоТекстуНРЕГ) > 0
			ИЛИ Найти(НРЕГ(Строка.ПланЗапроса), ОтборПоТекстуНРЕГ) > 0
			ИЛИ Найти(НРЕГ(Строка.Пользователь), ОтборПоТекстуНРЕГ) > 0
			ИЛИ Найти(НРЕГ(Строка.ИмяСУБД), ОтборПоТекстуНРЕГ) > 0 Тогда 
			мКоличествоЗапросовНаВывод = мКоличествоЗапросовНаВывод + 1;
			Результат.ДобавитьСтроку(ПолучитьТекстДляВывода(Строка));
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФОрмы.НадписьЗапросов.Заголовок = "Запросов: " + Строка(мУжеПрочитанныеСобытия.Количество()) + ?(НетОтобраПоТексту, "", " (Отобрано: " + Строка(мКоличествоЗапросовНаВывод) + ")");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЧТЕНИЯ ЛОГОВ

//Параметры:
// НовыеСобытия - таблица значений, в которую будут добавляться новые записи
// о прочитанных событиях
// ДатаНачала - дата и время после которых события следует считать новыми, т.е.
// события до этой даты будут игнорироваться
//
Процедура ПрочитатьСобытияИзЛогФайла(НовыеСобытия, ДатаНачала) Экспорт
	
	Перем ДатаПоследнегоСобытияВФайле;
	Перем СледующаяСтрока;
	
	ИмяФайлаСРодительскимКаталогом = ПолучитьИмяРодительскогоКаталога(мТекущийФайл.Путь) + "\" +  мТекущийФайл.Имя;
	ДатаИЧас = Лев(мТекущийФайл.Имя, 8); // В имени файла должены быть "зашиты" дата и час,
	// к которым относятся события
	
	НайденныйФайл = мПрочитанныеФайлы.Найти(мТекущийФайл.ПолноеИмя, "ПолноеИмя");
	Если НайденныйФайл = Неопределено Тогда
		НайденныйФайл = мПрочитанныеФайлы.Добавить();
		НайденныйФайл.ПолноеИмя = мТекущийФайл.ПолноеИмя;
		НайденныйФайл.Размер = мТекущийФайл.Размер();
		НайденныйФайл.ДатаПоследнегоСобытия = Дата(1,1,1);
	Иначе
		НайденныйФайл.Размер = мТекущийФайл.Размер();
	КонецЕсли;
	ДатаПоследнегоСобытияВФайле = НайденныйФайл.ДатаПоследнегоСобытия;
	
	// Тут далее и до конца процедуры идет совершенно ужасный код
	// со всякими Лев, Прав, Сред, Найти и т.п строковыми функциями.
	// по хорошему тут надо бы использовать регулярные выражения
	Пока Истина Цикл 
		Если СледующаяСтрока = Неопределено Тогда
			Попытка
				Стр = мЧтениеТекста.ПрочитатьСтроку();
			Исключение
				мЧтениеТекста = Неопределено;
				Возврат;
			КонецПопытки;
			Если Стр = Неопределено Тогда
				Прервать;	
			КонецЕсли;
		Иначе
			Стр = СледующаяСтрока;
			СледующаяСтрока = Неопределено;			
		КонецЕсли;
		
		ПозицияНачалаЗапроса = Найти(Стр, "Sql=");
		Если ПозицияНачалаЗапроса = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Первые 3 символа могут оказаться нечисловыми (BOM), пока непонятно как такое получается
		// поэтому в случае возникновения такой ситуации удалим их из строки
		Для НомерСимвола = 1 по 3 Цикл
			Если Не ЭтоЧисло(Сред(Стр, 1, 1)) Тогда
				Стр = Сред(Стр, 2);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;			
		
		ПозицияОкончания = Найти(Стр, ",");
		Если ПозицияОкончания = 0 Тогда
			Продолжить;
		КонецЕсли;
		МоментВремени = ДатаИЧас + Лев(Стр, ПозицияОкончания - 1);
		Попытка
			ДатаПоследнегоСобытияВФайле = Дата("20" + СтрЗаменить(Лев(МоментВремени, 13),":", ""));
		Исключение
			Продолжить;
		КонецПопытки;
		Если ДатаПоследнегоСобытияВФайле <= ДатаНачала ИЛИ НайденныйФайл.ДатаПоследнегоСобытия >= ДатаПоследнегоСобытияВФайле Тогда
			Продолжить;
		КонецЕсли;
		
		// Прочитаем остальные строки события
		Пока Истина Цикл
			СледующаяСтрока = мЧтениеТекста.ПрочитатьСтроку();
			
			Если СледующаяСтрока = Неопределено Тогда
				Прервать;
			КонецЕсли;
			Если Сред(СледующаяСтрока, 3, 1) = ":" И Сред(СледующаяСтрока, 6, 1) = "." И (Сред(СледующаяСтрока, 11, 1) = "-" ИЛИ Сред(СледующаяСтрока, 13, 1) = "-")  Тогда
				Если СтрДлина(СледующаяСтрока)  >= 20 И (Сред(СледующаяСтрока, 14, 7) = "Context" ИЛИ Сред(СледующаяСтрока, 16, 7) = "Context")  Тогда					
					Попытка
						ДатаПоследнегоСобытияВФайле =  Дата("20" + СтрЗаменить(Лев( ДатаИЧас + Лев(СледующаяСтрока, Найти(СледующаяСтрока, ",") - 1), 13),":", ""));
					Исключение
						Продолжить;
					КонецПопытки;					
					СледующаяСтрока = Сред(СледующаяСтрока, 22);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
			Стр = Стр + Символы.ПС + СледующаяСтрока;
		КонецЦикла;
		
		СтруктураСобытия = РазобратьСтрокуСобытия(Стр);
		// Если включено получение планов запросов, а план запросов пустой
		// то пропускаем это событие.
		// Непонятно правильно ли пропускать это событие или нет, но кажется это
		// на самом деле одно и тоже событие 
		Если ПолучатьПланыЗапросов И Не ЗначениеЗаполнено(СтруктураСобытия.ПланЗапроса) Тогда
			Продолжить;	
		КонецЕсли;	
		
		НоваяСтрока = НовыеСобытия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСобытия);		
		НоваяСтрока.МоментВремени = МоментВремени;
		Попытка
			НоваяСтрока.Дата = Дата("20" + СтрЗаменить(Лев(МоментВремени, 13),":", ""));
		Исключение
		КонецПопытки;
		НоваяСтрока.ИмяФайла = ИмяФайлаСРодительскимКаталогом;
		Если ИменаОбъектовПоМетаданным Тогда
			НоваяСтрока.ТекстЗапроса = ПреобразоватьИменаОбъектовВЗапросе(НоваяСтрока.ТекстЗапроса, мСоответствияИмен);
			НоваяСтрока.ПланЗапроса = ПреобразоватьИменаОбъектовВЗапросе(НоваяСтрока.ПланЗапроса, мСоответствияИмен);			
		КонецЕсли;	
		
	КонецЦикла;	
	
	НайденныйФайл.ДатаПоследнегоСобытия = ДатаПоследнегоСобытияВФайле;
	
КонецПроцедуры

Функция ПолучитьФайлыДляОбработки(ДатаНачала)
	
	Файлы = НайтиФайлы(мПутьКЛогам,"????????*.log", Истина);
	// Прочитанные файлы повторно уже не будем читать
	// Исключим также устаревшие файлы (с датой более ранней чем текущая)
	Индекс = 0;
	Если Файлы.Количество() = 0 Тогда
		Возврат Файлы; // Не найдено файлов
	КонецЕсли;
	
	ТекущаяДата = Дата(Год(ДатаНачала), Месяц(ДатаНачала), День(ДатаНачала), Час(ДатаНачала), 0, 0);
	Пока Истина Цикл
		Файл = Файлы.Получить(Индекс);
		
		// Если этот файл в данный момент обрабатывается, то исключим его из массива
		Если мЧтениеТекста <> Неопределено И Файл.ПолноеИмя = мТекущийФайл.ПолноеИмя Тогда 
			Файлы.Удалить(Индекс);
			Индекс = Индекс - 1;								
		ИначеЕсли Дата("20" + Лев(Файл.Имя, 8) + "0000") < ТекущаяДата Тогда
			Файлы.Удалить(Индекс);
			Индекс = Индекс - 1;
		Иначе	
			НайденныйФайл = мПрочитанныеФайлы.Найти(Файл.ПолноеИмя, "ПолноеИмя");
			Если НайденныйФайл <> Неопределено И НайденныйФайл.Размер = Файл.Размер() Тогда
				Файлы.Удалить(Индекс);
				Индекс = Индекс - 1;				
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;	
		Если Индекс >= Файлы.Количество() Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Файлы;
	
КонецФункции

// Процедура один раз в секунду анализирует наличие файлов в каталоге логов
// если какой-либо из файлов изменился с момента последнего чтения,
// или добавились новые - читает файлы логов
//
Процедура ПрочитатьЛоги()
	
	// Получим массив файлов, которые необходимо обработать
	Файлы = ПолучитьФайлыДляОбработки(ТекущаяДата());
	
	НовыеСобытия = Новый ТаблицаЗначений;
	НовыеСобытия.Колонки.Добавить("МоментВремени");
	НовыеСобытия.Колонки.Добавить("ТекстЗапроса");
	НовыеСобытия.Колонки.Добавить("Контекст");
	НовыеСобытия.Колонки.Добавить("ПланЗапроса");	
	НовыеСобытия.Колонки.Добавить("Пользователь");
	НовыеСобытия.Колонки.Добавить("ИмяСУБД");
	НовыеСобытия.Колонки.Добавить("Дата");
	НовыеСобытия.Колонки.Добавить("ИмяФайла");
	
	// Если уже читали ранее файл, то продолжим его чтение
	Если мЧтениеТекста <> Неопределено Тогда
		ПрочитатьСобытияИзЛогФайла(НовыеСобытия, мДатаПриСтарте);	
		мЧтениеТекста.Закрыть(); 
		мЧтениеТекста = Неопределено;
	КонецЕсли;
	
	Для каждого Файл из Файлы Цикл
		мЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, "UTF-8",,,Ложь);
		мТекущийФайл = Файл;
		ПрочитатьСобытияИзЛогФайла(НовыеСобытия, мДатаПриСтарте);
	КонецЦикла;
	
	НетОтобраПоТексту = ПустаяСтрока(ОтборПоТексту);
	ОтборПоТекстуНРЕГ = НРЕГ(ОтборПоТексту);
	НовыеСобытия.Сортировать("МоментВремени");
	Результат = ЭлементыФОрмы.Результат;
	Для Каждого Строка из НовыеСобытия Цикл
		Если НетОтобраПоТексту ИЛИ Найти(НРЕГ(Строка.ТекстЗапроса), ОтборПоТекстуНРЕГ) > 0 Тогда 
			мКоличествоЗапросовНаВывод = мКоличествоЗапросовНаВывод + 1;
			Результат.ДобавитьСтроку(ПолучитьТекстДляВывода(Строка));
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(мУжеПрочитанныеСобытия.Добавить(), Строка);
	КонецЦикла;
	
	ЭлементыФОрмы.НадписьЗапросов.Заголовок = "Запросов: " + Строка(мУжеПрочитанныеСобытия.Количество()) + ?(НетОтобраПоТексту, "", " (Отобрано: " + Строка(мКоличествоЗапросовНаВывод) + ")");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура СтартНажатие(Элемент)
	
	ЭлементыФормы.НадписьЗапросов.Видимость = Истина;
	
	Если мИдетОбработка Тогда
		ОтключитьОбработчикОжидания("ПрочитатьЛоги");
		Заголовок = "Вывод запросов из технологического журнала (остановлено)";
		мИдетОбработка = Ложь;
		ЭлементыФормы.Старт.Заголовок = "Старт";
		
		// Удалим файл настроек чтобы остановить запись
		Если мБылСозданФайлНастроек Тогда
			Попытка
				УдалитьФайлы(мПутьКФайлуНастроекЖурнала);
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		// Создадим файл настроек технологического журнала, если существует, то сделаем бэкап
		мПутьКФайлуНастроекЖурнала = ПолучитьПутьКФайлуНастроекЖурнала(); 
		
		// Сделаем бэкап существующего файла
		СделатьБэкапФайлаНастроек();		
		
		Файл = Новый Файл(мПутьКФайлуНастроекЖурнала);
		мПутьКЛогам = Файл.Путь + "logs_techlogqueryviewer\";
		мБылСозданФайлНастроек = СоздатьФайлНастроек(мПутьКФайлуНастроекЖурнала, ПолучатьПланыЗапросов);
		Если Не мБылСозданФайлНастроек Тогда
			Файл = Новый Файл(мПутьКФайлуНастроекЖурнала);
			Если Не Файл.Существует() Тогда
				
				// Попробуем создать файл в профиле пользователя
				мПутьКФайлуНастроекЖурнала = ПолучитьПутьКФайлуНастроекЖурналаВПрофилеПользователя();
				
				Если мПутьКФайлуНастроекЖурнала <> Неопределено Тогда
					// Сделаем бэкап существующего файла
					СделатьБэкапФайлаНастроек();
					Файл = Новый Файл(мПутьКФайлуНастроекЖурнала);
					мПутьКЛогам = Файл.Путь + "logs_techlogqueryviewer\";
					мБылСозданФайлНастроек = СоздатьФайлНастроек(мПутьКФайлуНастроекЖурнала, ПолучатьПланыЗапросов);
					Если Не мБылСозданФайлНастроек Тогда
						Заголовок = "Вывод запросов из технологического журнала (Не удалось создать файл настроек)";
						Предупреждение("Не удалось создать файл настроек");
						мИдетОбработка = Ложь;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		мИдетОбработка = Истина;
		Заголовок = "Вывод запросов из технологического журнала (идет обработка)";
		// Заполним соответствия имен
		Если ИменаОбъектовПоМетаданным и мСоответствияИмен.Количество() = 0 Тогда
			ЗаполнитьСоответствияИмен();
		КонецЕсли;
		
		//Запустим обработчик логов
		ПодключитьОбработчикОжидания("ПрочитатьЛоги", 1);
		ЭлементыФормы.Старт.Заголовок = "Стоп";
	КонецЕсли;
	
	мДатаПриСтарте = ТекущаяДата();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	//Удалим созданный нами файл настроек
	Если мБылСозданФайлНастроек Тогда
		Попытка
			УдалитьФайлы(мПутьКФайлуНастроекЖурнала);
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
	// Восстановим бэкап файла настроек журнала (если таковой был)
	Если мИмяФайлаБэкапаНастроекЖурнала <> Неопределено Тогда
		ФайлБэкапа = Новый Файл(мИмяФайлаБэкапаНастроекЖурнала);
		Если ФайлБэкапа.Существует() Тогда
			ПереместитьФайл(мИмяФайлаБэкапаНастроекЖурнала, мПутьКФайлуНастроекЖурнала); 
		КонецЕсли;
	КонецЕсли;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИменаОбъектовПоМетаданным", ИменаОбъектовПоМетаданным);
	Настройки.Вставить("ПолучатьПланыЗапросов", ПолучатьПланыЗапросов);	
	СохранитьЗначение("Обработка.ВыводЗапросовИзТехнологическогоЖурнала", Настройки);
	
КонецПроцедуры

Процедура ОчиститьНажатие(Элемент)
	
	ЭлементыФормы.Результат.Очистить();
	мУжеПрочитанныеСобытия.Очистить();
	мДатаПриСтарте = ТекущаяДата();
	мКоличествоЗапросовНаВывод = 0;
	ЭлементыФОрмы.НадписьЗапросов.Заголовок = "Запросов: 0";
	
КонецПроцедуры

Процедура ИменаОбъектовПоМетаданнымПриИзменении(Элемент)
	
	Если ИменаОбъектовПоМетаданным Тогда
		ЗаполнитьСоответствияИмен();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Настройки = ВосстановитьЗначение("Обработка.ВыводЗапросовИзТехнологическогоЖурнала");
	
	ИменаОбъектовПоМетаданным = Истина;
	ПолучатьПланыЗапросов = Истина;
	
	Если Настройки <> Неопределено И ТипЗнч(Настройки) = Тип("Структура") Тогда
		Свойство = Неопределено;
		Если Настройки.Свойство("ИменаОбъектовПоМетаданным", Свойство) Тогда
			ИменаОбъектовПоМетаданным = Свойство;
		КонецЕсли;
		Если Настройки.Свойство("ПолучатьПланыЗапросов", Свойство) Тогда
			ПолучатьПланыЗапросов = Свойство;
		КонецЕсли;		
	КонецЕсли;
			
	//Запустим обработчик поиска каталога журнала
	ПодключитьОбработчикОжидания("ВывестиПутьККаталогуЖурнала", 1);
	
КонецПроцедуры

Процедура ПредставлениеПутиККаталогуЛоговНажатие(Элемент)
	
	Путь = мПутьКЛогам;
	Файл = Новый Файл(Путь);
	Если Файл.Существует() Тогда
		ЗапуститьПриложение(Путь);
	Иначе
		Предупреждение("Каталог не существует.");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборПоТекстуПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

Процедура ОтборПоТекстуОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьОтбор();
	
КонецПроцедуры

Процедура ПолучатьПланыЗапросовПриИзменении(Элемент)
	
	Если мИдетОбработка Тогда
		мБылСозданФайлНастроек = СоздатьФайлНастроек(мПутьКФайлуНастроекЖурнала, ПолучатьПланыЗапросов);
    КонецЕсли;	
	
КонецПроцедуры

мПрочитанныеФайлы = Новый ТаблицаЗначений;
мПрочитанныеФайлы.Колонки.Добавить("ПолноеИмя");
мПрочитанныеФайлы.Колонки.Добавить("Размер");
мПрочитанныеФайлы.Колонки.Добавить("ДатаПоследнегоСобытия");

мСоответствияИмен = Новый ТаблицаЗначений;
мСоответствияИмен.Колонки.Добавить("СУБД");
мСоответствияИмен.Колонки.Добавить("Метаданные");
мСоответствияИмен.Индексы.Добавить("СУБД");

мУжеПрочитанныеСобытия = Новый ТаблицаЗначений;
мУжеПрочитанныеСобытия.Колонки.Добавить("МоментВремени");
мУжеПрочитанныеСобытия.Колонки.Добавить("ТекстЗапроса");
мУжеПрочитанныеСобытия.Колонки.Добавить("ПланЗапроса");
мУжеПрочитанныеСобытия.Колонки.Добавить("Контекст");
мУжеПрочитанныеСобытия.Колонки.Добавить("Пользователь");
мУжеПрочитанныеСобытия.Колонки.Добавить("ИмяСУБД");
мУжеПрочитанныеСобытия.Колонки.Добавить("Дата");
мУжеПрочитанныеСобытия.Колонки.Добавить("ИмяФайла");

мИдетОбработка = Ложь;
мКоличествоЗапросовНаВывод = 0;
мБылСозданФайлНастроек = Ложь;

мКоличествоТочекАнимиации = 1;