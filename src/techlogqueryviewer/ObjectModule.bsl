Перем мРазделители;
Перем мЦифры;

// Процедуры и функции общего назначения

// Определяет, соответствует ли строка числу.
//
// Праметры:
//	Слово - строка - проверяемя строка
//
// Возвращаемое значение:
//  Булево - Истина, если строка является числом, в противном случаа ложь.
//
Функция ЭтоЧисло(Слово) Экспорт
		
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		Если Найти(мЦифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции // ЭтоЧисло()

Функция ПолучитьИмяРодительскогоКаталога(Путь) Экспорт
	НомерСимвола = СтрДлина(Путь) - 1;
	ПозицияПервогоСимвола = 0;
	Пока НомерСимвола >= 0 Цикл
		Символ = Сред(Путь, НомерСимвола, 1);
		Если Символ = "\" Тогда
			ПозицияПервогоСимвола = НомерСимвола;
			Прервать;	
		КонецЕсли;
		НомерСимвола = НомерСимвола - 1;
	КонецЦикла;
	
	Возврат Сред(Путь, ПозицияПервогоСимвола, СтрДлина(Путь) - ПозицияПервогоСимвола);
	
КонецФункции

Функция ПолучитьУникальноеИмяФайла(ИсходноеИмя) Экспорт
	
	Имя = ИсходноеИмя + "_1";
	Файл = Новый Файл(Имя);
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Имя = ИсходноеИмя + "_" + Строка(Счетчик);
		Файл = Новый Файл(Имя);
	КонецЦикла;	
	Возврат Имя;
КонецФункции

Функция ПолучитьПутьКФайлуНастроекЖурнала() Экспорт
	Возврат КаталогПрограммы() + "\conf\logcfg.xml";	
КонецФункции

// Определение каталога "Application Data" текущего пользователя Windows
//
Функция ПолучитьПутьКФайлуНастроекЖурналаВПрофилеПользователя() Экспорт 
	
	// Создаем COM объект "Shell.Application" (Для Windows 98 и  Windows NT 4.0 требуется установка
    // Windows Script Host 5.1 и Internet Explorer 4.0)	
	App = Новый COMОбъект("Shell.Application");
	Folder = App.Namespace(28);
	Путь = СокрЛП(Folder.Self.Path);
	Путь = ?(Прав(Путь, 1) = "\", Путь, Путь + "\");
	
	Файл = Новый Файл(Путь + "\1C\1cv8\conf\");
	Если Файл.Существует() Тогда
		Возврат Файл.ПолноеИмя + "\logcfg.xml";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЗаменуПоМетаданным(Слово, СоответствияИмен)
	СловоДляПоиска = Слово;
	Если Лев(Слово, 1) = "_" Тогда
		СловоДляПоиска = Сред(СловоДляПоиска, 2);
	КонецЕсли;
	Если Прав(Слово, 4) = "RRef" И  Прав(Слово, 6) <> "_RRRef" Тогда
		СловоДляПоиска = Лев(СловоДляПоиска, СтрДлина(СловоДляПоиска) - 4);	
	КонецЕсли;
	НайденнаяСтрока = СоответствияИмен.Найти(СловоДляПоиска, "СУБД");
	Если НайденнаяСтрока = Неопределено Тогда
		
		Если Найти(СловоДляПоиска, "Turnover") = 0 Тогда // ресурсы регистра бухгалтерии не обрабатываем	
			Если Прав(СловоДляПоиска, 1) = "_" Тогда
				НайденнаяСтрока = СоответствияИмен.Найти(Лев(СловоДляПоиска, СтрДлина(СловоДляПоиска) - 1), "СУБД");			
				Если НайденнаяСтрока <> Неопределено Тогда
					Возврат НайденнаяСтрока.Метаданные + "_"; 
				КонецЕсли;
			КонецЕсли;
			
			Если Прав(СловоДляПоиска, 5) = "_TYPE" Тогда
				НайденнаяСтрока = СоответствияИмен.Найти(Лев(СловоДляПоиска, СтрДлина(СловоДляПоиска) - 5), "СУБД");			
				Если НайденнаяСтрока <> Неопределено Тогда
					Возврат НайденнаяСтрока.Метаданные + "_TYPE"; 
				КонецЕсли;
			КонецЕсли;
			
			Если Прав(СловоДляПоиска, 6) = "_RTRef" Тогда
				НайденнаяСтрока = СоответствияИмен.Найти(Лев(СловоДляПоиска, СтрДлина(СловоДляПоиска) - 6), "СУБД");			
				Если НайденнаяСтрока <> Неопределено Тогда
					Возврат НайденнаяСтрока.Метаданные + "_RTRef"; 
				КонецЕсли;
			КонецЕсли;
			
			Если Прав(СловоДляПоиска, 6) = "_RRRef" Тогда
				НайденнаяСтрока = СоответствияИмен.Найти(Лев(СловоДляПоиска, СтрДлина(СловоДляПоиска) - 6), "СУБД");			
				Если НайденнаяСтрока <> Неопределено Тогда
					Возврат НайденнаяСтрока.Метаданные + "_RRRef"; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Возврат НайденнаяСтрока.Метаданные;
	КонецЕсли;	
	Возврат Слово;	
КонецФункции

Функция ПреобразоватьИменаОбъектовВЗапросе(ИсходныйТекстЗапроса, СоответствияИмен) Экспорт
	// (Алгоритм преобразования имен нуждается в доработке, сейчас он крайне примитивен,
	// он медленный и не гарантирует правильного преобразования всех слов)
	Результат  = "";
	Слово = "";
	ЭтоСлово = Ложь;
	Длина = СтрДлина(ИсходныйТекстЗапроса);
	Для НомерСимвола = 1 По Длина Цикл
		Символ = Сред(ИсходныйТекстЗапроса, НомерСимвола, 1);
		Если Найти(мРазделители, Символ) > 0 ИЛИ НомерСимвола = Длина Тогда
			Если ЭтоСлово И СтрДлина(Слово) > 0 Тогда
				Результат = Результат + НайтиЗаменуПоМетаданным(Слово, СоответствияИмен) + Символ;
				Слово = "";
			Иначе
				ЭтоСлово = Истина;
				Результат = Результат + Символ;
			КонецЕсли;
			Продолжить;
		ИначеЕсли ЭтоСлово Тогда
			Слово = Слово + Символ;
		Иначе
			Результат = Результат + Символ;			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьФайлНастроек(Путь, ПолучатьПланыЗапросов = Истина) Экспорт
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.ДобавитьСтроку("<config xmlns=""http://v8.1c.ru/v8/tech-log"">");
	Если ПолучатьПланыЗапросов Тогда
		ТекстДок.ДобавитьСтроку("<plansql/>");
	КонецЕсли;	
	
	Файл = Новый Файл(Путь);
	
	ТекстДок.ДобавитьСтроку("<log location=""" + Файл.Путь + "logs_techlogqueryviewer" + """ history=""1"">
	|<event>
	|<eq property=""Name"" value=""DBMSSQL""/>
	|</event>
	|<event>
	|<eq property=""Name"" value=""DBPOSTGRS""/>
	|</event> 
	|<event>
	|<eq property=""Name"" value=""DB2""/>
	|</event>
	|<event>
	|<eq property=""name"" value=""dboracle""/>
	|</event>
	|<event>
	|<eq property=""Name"" value=""DBV8DBEng""/>
	|</event> 	
	|<property name=""Sql""/>
	|<property name=""Context""/>
	|<property name=""Usr""/>");
	Если ПолучатьПланыЗапросов Тогда	
		ТекстДок.ДобавитьСтроку("<property name=""planSQLText""/>");
	КонецЕсли;		
	ТекстДок.ДобавитьСтроку("</log></config>");
	
	Попытка
		ТекстДок.Записать(Путь);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

Функция ПолучитьИмяПользователяИзСтрокиСобытия(Стр)
	
	// Алгоритм основан на том предположении, что
	// Имя пользователя начинается со строки "Usr="
	// и заканчивается символом ","
	ПозицияПервогоРазделителя = Найти(Стр, "Usr=");
	Если ПозицияПервогоРазделителя > 0 Тогда
		ПозицияВторогоРазделителя = Найти(Сред(Стр, ПозицияПервогоРазделителя + 4), ",");
		Если ПозицияВторогоРазделителя > 0 Тогда
			Возврат Сред(Стр, ПозицияПервогоРазделителя + 4, ПозицияВторогоРазделителя - 1);
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
Конецфункции

Функция ПолучитьИмяСУДБИзСтрокиСобытия(Стр)
	
	// Алгоритм основан на том предположении, что
	// название СУБД идет сразу же после отметки момента времени
	// и отделяется запятыми
	ПозицияПервогоРазделителя = Найти(Стр, ",");
	Если ПозицияПервогоРазделителя > 0 Тогда
		ПозицияВторогоРазделителя = Найти(Сред(Стр, ПозицияПервогоРазделителя + 1), ",");
		Если ПозицияВторогоРазделителя > 0 Тогда
			Имя = Сред(Стр, ПозицияПервогоРазделителя + 1, ПозицияВторогоРазделителя - 1);
			Если Имя = "DBV8DBEng" Тогда
				Возврат "Файловая СУБД";
			ИначеЕсли Имя = "DBMSSQL" Тогда
				Возврат "Microsoft SQL Server";
			ИначеЕсли Имя = "DBPOSTGRS" Тогда
				Возврат "PostgreSQL";
			ИначеЕсли Имя = "DB2" Тогда
				Возврат "IBM DB2";
			ИначеЕсли НРЕГ(Имя) = "dboracle" Тогда
				Возврат "Oracle Database";
			Иначе 
				Возврат Имя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
Конецфункции

Функция НайтиРазделитель(Стр, ДлинаСтроки, Знач НачПозиция, Разделитель)
	Сдвиг = 0;
	Пока Истина Цикл
		ПозицияРазделителя = Найти(Сред(Стр, НачПозиция + Сдвиг), Разделитель);
		
		Если ПозицияРазделителя > 0 Тогда
			Если НачПозиция + ПозицияРазделителя - 1 < ДлинаСтроки И Сред(Стр, НачПозиция + Сдвиг + ПозицияРазделителя, 1) = Разделитель Тогда
				Сдвиг = Сдвиг + ПозицияРазделителя + 1;
			Иначе
				Возврат Сдвиг + ПозицияРазделителя;
			КонецЕсли;
		Иначе
			ПозицияРазделителя = Найти(Сред(Стр, НачПозиция + Сдвиг), "Context=");
			Если ПозицияРазделителя > 0 Тогда
				Возврат ПозицияРазделителя - 2;
			Иначе
				ПозицияРазделителя = Найти(Сред(Стр, НачПозиция + Сдвиг), "planSQLText=");
				Если ПозицияРазделителя > 0 Тогда
					Возврат ПозицияРазделителя - 2;
				Иначе
					Возврат 0;
				КонецЕсли;
				
				Возврат 0;
			КонецЕсли;
		КонецЕсли;					 
	КонецЦикла;
КонецФункции

Функция ПолучитьСвойствоСобытия(Стр, ДлинаСтроки, ОткрывающийТэг)
	
	ДлинаТэга = СтрДлина(ОткрывающийТэг);
	Начало = Найти(Стр, ОткрывающийТэг);
	Если Начало > 0 И Начало + ДлинаТэга < ДлинаСтроки Тогда 
		Разделитель = Сред(Стр, Начало + ДлинаТэга, 1);
		Если Разделитель <> """" И Разделитель <> "'" Тогда
			ПозицияПервогоРазделителя = Начало + ДлинаТэга;
			Разделитель = Неопределено;
		Иначе
			ПозицияПервогоРазделителя = Начало + ДлинаТэга + 1;
		КонецЕсли;	 
		Если Разделитель = Неопределено Тогда
			ПозицияВторогоРазделителя = Найти(Сред(Стр, ПозицияПервогоРазделителя), "Context=");
			Если ПозицияВторогоРазделителя > 0 Тогда
				Возврат Сред(Стр, ПозицияПервогоРазделителя, ПозицияВторогоРазделителя - 2);
			Иначе
				ПозицияВторогоРазделителя = Найти(Сред(Стр, ПозицияПервогоРазделителя), "planSQLText=");
				Если ПозицияВторогоРазделителя > 0 Тогда
					Возврат  Сред(Стр, ПозицияПервогоРазделителя, ПозицияВторогоРазделителя - 2);
				Иначе
					Возврат Сред(Стр, ПозицияПервогоРазделителя);
				КонецЕсли;				
			КонецЕсли;			
		Иначе
			ПозицияВторогоРазделителя = НайтиРазделитель(Стр, ДлинаСтроки, ПозицияПервогоРазделителя, Разделитель);
			Если ПозицияВторогоРазделителя > 0 Тогда
				Возврат Сред(Стр, ПозицияПервогоРазделителя, ПозицияВторогоРазделителя - 1);
			Иначе
				Возврат Сред(Стр, ПозицияПервогоРазделителя);
			КонецЕсли;					 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РазобратьСтрокуСобытия(Стр) Экспорт
	
	Результат = Новый Структура("ТекстЗапроса, Контекст, ПланЗапроса, Пользователь, ИмяСУБД");
	
	Результат.ИмяСУБД = ПолучитьИмяСУДБИзСтрокиСобытия(Стр);
	Результат.Пользователь = ПолучитьИмяПользователяИзСтрокиСобытия(Стр);
	Длина = СтрДлина(Стр);
	
	Результат.ТекстЗапроса = ПолучитьСвойствоСобытия(Стр, Длина, "Sql=");	
	Результат.Контекст = СокрЛ(ПолучитьСвойствоСобытия(Стр, Длина, "Context="));	
	Результат.ПланЗапроса = ПолучитьСвойствоСобытия(Стр, Длина, "planSQLText=");	
	
	Возврат Результат;
	
КонецФункции

мРазделители = " ,.()+-/*=<>";
мРазделители = мРазделители + Символы.Таб;
мРазделители = мРазделители + Символы.ПС;
мЦифры = "1234567890";